
///* ==== colors ==== */
$white: #fff;
$black: #000;
$off-black: #222;
$light-grey: #ddd;
$dark-grey: #555;


///* ==== mixins ==== */

@mixin iepie {
	behavior: url(/wp-content/themes/bones/PIE.htc);
}

@mixin serif {
	font-family: Cambria, Georgia, "Times New Roman", Times, serif;
}

@mixin sans-serif {
	font-family: Verdana, sans-serif;
}


@mixin fontFace ($font-name, $file-name, $weight: "normal") {
	@font-face {
		font-family: '#{$font-name}';
		src: url('/wp-content/themes/bones/library/_fonts/#{$file-name}.eot'); /* IE9 Compat Modes */
		src: local('☺'),
			 url('/wp-content/themes/bones/library/_fonts/#{$file-name}.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
			 url('/wp-content/themes/bones/library/_fonts/#{$file-name}.woff') format('woff'), /* Modern Browsers */
			 url('/wp-content/themes/bones/library/_fonts/#{$file-name}.ttf')  format('truetype'), /* Safari, Android, iOS */
			 url('/wp-content/themes/bones/library/_fonts/#{$file-name}.svg#svgFontName') format('svg'); /* Legacy iOS */
		@if ($weight == "normal") {
			font-weight: normal;
			font-style: normal;
		} @else if ($weight == "bold") {
			font-weight: bold;
			font-style: normal;
		} @else if ($weight == "italic") {
			font-weight: normal;
			font-style: italic;
		} @else if ($weight == "boldItalic") {
			font-weight: bold;
			font-style: italic;
		}
	}
}

@mixin sticky-footer($footer_height, $content_wrapper, $content, $footer_wrapper) {
	html, body, #{$content_wrapper} {
		height: 100%;
	}
	
	body > #{$content_wrapper} {
		height: auto; 
		min-height: 100%;
	}
		
	#{$content} {
		padding-bottom: $footer_height;
	}
	
	#{$footer_wrapper} {
		position: relative;
		margin-top: -$footer_height;
		height: $footer_height;
		clear: both;
		z-index: 9998;
	}
}


///////////////
//sprite stuff

//uncomment this import statement to pull in sprite sheet!!
//@import "../_images/sprites/*.png";

/*
@mixin sprite-inc($image) {
	@include sprites-sprite($image);
}

@mixin hideText {
	text-indent: -9999em;
	letter-spacing: -9999em;
	overflow: hidden;
}

//sprite replace to replace text with image... should usually be used with display: block
@mixin spriteReplace($image, $width, $height) {
	@include sprite-inc($image);
	@include hideText;
	width: $width;
	height: $height;
}

//inline sprite mixin; requires a pseudo-element, such as :before or :after
@mixin spriteInline($image, $width, $height) {
	@include sprite-inc($image);
	display: inline;
	content: "";
	width: $width;
	height: $height;
}
//mixin for sprites on elements with padding or multiple lines of text
@mixin spritePadded($image, $width, $height) {
	@include sprite-inc($image);
	position: absolute;
	content: "";
	width: $width;
	height: $height;
}
*/

// Define the sprites here. Notice that I've added an optional spacing.
$sprites: sprite-map("sprites/*.png", $spacing: 0px);
$sprites2x: sprite-map("sprites2x/*.png", $spacing: 0px);

// Now let's define the sprite mixin.
// This delegates to the reusable retina-sprite mixin.
@mixin sprite($name) {
  @include retina-sprite($name, $sprites, $sprites2x);
}

// The general purpose retina sprite mixin.
//
//    @include retina-sprite(name, $spritemap1, $spritemap2)
//    @include retina-sprite(name, $spritemap1, $spritemap2[, $dimensions: true, $pad: 0])
//
//    If `dimensions` is true, then width/height will also be set.
//
//    if `pad` is non-zero, then that's how much padding the element will have (requires
//    $spacing on the sprite maps). Great for iPhone interfaces to make hit areas bigger.
//
@mixin retina-sprite($name, $sprites, $sprites2x, $dimensions: true, $pad: 0) {
  @if ($dimensions == true) {
    @include sprite-dimensions($sprites, $name)
  }
  background-image: sprite-url($sprites);
  background-position: sprite-position($sprites, $name, -$pad, -$pad);
  background-repeat: no-repeat;

  @if ($pad > 0) {
    padding: $pad;
  }

  @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5) {
      $pos: sprite-position($sprites2x, $name, -$pad*2, -$pad*2);
      background-image: sprite-url($sprites2x);
      background-position: nth($pos, 1) nth($pos, 2)/2;
      @include background-size(ceil(image-width(sprite-path($sprites2x)) / 2), auto);
      // ^-- this is the "smarter" way to do this.
      //     sprite-path() returns the path of the generated sprite sheet, which
      //     image-width() calculates the width of. the ceil() is in place in case
      //     you have sprites that have an odd-number of pixels in width (which
      //     you shouldn't in the first place)
   }
}


/* RESET
----------------------------------------------------------------------------------------*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font-weight: inherit;
  font-style: inherit;
  font-family: inherit;
  vertical-align: baseline;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

caption, th, td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

q, blockquote {
  quotes: none;
}
q:before, q:after, blockquote:before, blockquote:after {
  content: "";
  content: none;
}

a img {
  border: none;
}

img, object { outline: none; }

article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section, summary {
  display: block;
}

/* ==== global settings ==== */


html {
	overflow-y: scroll;
}

img, embed, object, video { max-width: 100%; }
.ie6 img.full, .ie6 object.full, .ie6 embed, .ie6 video { width: 100%; }


/* maxvoltar.com/archive/-webkit-font-smoothing */
html { -webkit-font-smoothing: antialiased; }

/* CORE TYPOGRAPHY
----------------------------------------------------------------------------------------*/

body {
  font-size: 1em;
  line-height: 1.618em;
}

h1, h2, h3, h4, h5, h6 {
	margin-bottom: 0.809em;
	font-weight: bold;
}

h1 {
  font-size: 1.5em; /* 24px --> 24 ÷ 16 = 1.5 */
  line-height: 1em; /* 24px --> 24 ÷ 24 = 1 */
}

h2 {
  font-size: 1.375em; /* 22px --> 22 ÷ 16 = 1.375 */
  line-height: 1.0909em; /* 24px --> 24 ÷ 22 = 1.090909(09) */
}

h3 {
  font-size: 1.25em; /* 20px --> 20 ÷ 16 = 1.25 */
  line-height: 1.2em; /* 24px --> 24 ÷ 20 = 1.2 */
}

h4 {
  font-size: 1.125em; /* 18px --> 18 ÷ 16 = 1.125 */
  line-height: 1.333em; /* 24px --> 24 ÷ 18 = 1.3333333(3) */
}

h5, h6 {
  font-size: 1em; /* 16px --> 16 ÷ 16 = 1 */
  line-height: 1.5em; /* 24px --> 24 ÷ 16 = 1.5 */
}

p, ul, ol, dl, blockquote {
    font-size: 1em;
    line-height: 1.618em;
    margin-bottom: 1.618em; 
}

ul { list-style-type: disc; margin-left: 1.618em; }
ol { list-style-type: decimal; margin-left: 1.618em; }
nav ul, nav ol { list-style: none; margin: 0; padding: 0;}

b, strong { font-weight: bold; }
i, em { font-style: italic; }
small { font-size: 80%; }

/* LINKS
----------------------------------------------------------------------------------------*/
a, a:visited { outline: none; color: #439BBD; text-decoration: underline; }  
a:hover { outline: none; text-decoration:none; }  
a:active, a:focus { outline: none; }

/* BROWSER AND NON-SEMANTIC STYLING
----------------------------------------------------------------------------------------*/
.cf:before, .cf:after { content: ""; display: block; }
.cf:after { clear: both; }
.ie6 .cf { zoom: 1 }

/* align checkboxes, radios, text inputs with their label */
input[type="radio"] { vertical-align: text-bottom; }
input[type="checkbox"] { vertical-align: bottom; *vertical-align: baseline; }
.ie6 input { vertical-align: text-bottom; }

/* hand cursor on clickable input elements */
label, input[type=button], input[type=submit], button { cursor: pointer; }

/* bicubic resizing for non-native sized IMG:
code.flickr.com/blog/2008/11/12/on-ui-quality-the-little-things-client-side-image-resizing/ */
.ie7 img { -ms-interpolation-mode: bicubic; }


/* ==== common classes ==== */
.clear {
	clear: both;
}

.iepie {
	behavior: url(/wp-content/themes/ybbase/PIE.htc);
}

/* Hide for both screenreaders and browsers: h5bp.com/m */
.hidden { display: none !important; visibility: hidden; }
 
/*  Hide only visually, but have it available for screenreaders: h5bp.com/v */
.visuallyhidden { border: 0; clip: rect(0 0 0 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; }

/* Extends the .visuallyhidden class to allow the element to be focusable when navigated to via the keyboard: h5bp.com/p */
.visuallyhidden.focusable:active, .visuallyhidden.focusable:focus { clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto; }

/* Hide visually and from screenreaders, but maintain layout */
.invisible { visibility: hidden; }

.fltlft {
	@include float-left;
	margin-right: 1.618em;
	margin-bottom: 1.618em;
}

.fltrt {
	@include float-right;
	margin-left: 1.618em;
	margin-bottom: 1.618em;
}

.hasPlaceholder {
	color: #777;
}

li.dropMenu {
	position: relative;
	ul {
		position: absolute;
	}
}

.empty { color: #aaa; }

.placeholder {
  color: #aaa;
}

.clearfix {
	@include clearfix();
}

/*
* print styles
* inlined to avoid required HTTP connection www.phpied.com/delay-loading-your-print-css/
*/
@media print {
* { background: transparent !important; color: #444 !important; text-shadow: none; }
  a, a:visited { color: #444 !important; text-decoration: underline; }
  /* Don't show links for images */
  pre, blockquote { border: 1px solid #999; page-break-inside: avoid; }
  img { page-break-inside: avoid; }
  @page { margin: 0.5cm; }
  p, h2, h3 { orphans: 3; widows: 3; }
  h2, h3{ page-break-after: avoid; }
}

