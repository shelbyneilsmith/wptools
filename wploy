#!/bin/sh
#
# Script to for basic Wordpress site deployment.
#

in_array() {
	local haystack=${1}[@]
	local needle=${2}
	for i in ${!haystack}; do
		if [[ ${i} == ${needle} ]]; then
			return 0
		fi
	done
	return 1
}

pause() {
	read -p "$*"
}

continueprompt() {
	read ifcontinue

	case $ifcontinue in
		[nN] | [n|N][O|o] )
			clear
			echo "---------------------------------------------------------------------------"
			pause "Probably a good idea. Might want to double check everything anyway. `echo $'\n> '`Press [Enter] to exit."
			clear
			exit
			;;
		[yY] | [yY][Ee][Ss] )
			# Just continue script if user chooses "yes"
			;;
		* )
			echo "\n---------------------------------------------------------------------------"
			echo "Huh?"
			echo "---------------------------------------------------------------------------\n"
			continueprompt
			;;
	esac
}

migrate() {
	LANG=C LC_ALL=C
	if [[ $dest_id == "p" ]]; then
		echo "\n---------------------------------------------------------------------------"
		echo "You are pushing your project to the production server!"
		echo "Are you absolutely sure you want to do this?? [y/N]"
		echo "---------------------------------------------------------------------------\n"
		continueprompt
	fi

	if [ $multisite == true ] ; then
		network_param='--network '
	fi

	if [[ $src_id == "l" ]]; then
		if [ -d $SITES_DIR/$project_id/web/node_modules ]; then #check if grunt exists
			#first, run out grunt build script - if grunt exists for this project
			grunt build
		fi

		#export Database
		mysqldump -u $SRC_DB_USER_ESC -p$SRC_DB_PASS_ESC ${!SRC_DB} > ${!SRC_PATH}${!SRC_DB}.sql

		#move the site files to remote server
		rsync -avO --exclude-from 'wploy-excludes.txt' -e ssh ${!SRC_PATH} ${!DEST_SSH_USER}@${!DEST_HOST}:${!DEST_PATH}

		#remove database dump from working directory
		rm ${!SRC_PATH}${!SRC_DB}.sql

		#find and replace old Database Info in wp-config.php file
ssh ${!DEST_SSH_USER}@${!DEST_HOST} /bin/bash << EOF
sed -i -e "s/define('DB_NAME', '${!SRC_DB}');/define('DB_NAME', '${!DEST_DB}');/g; s/define('DB_USER', '$SRC_DB_USER_ESC');/define('DB_USER', '$DEST_DB_USER_ESC');/g; s/define('DB_PASSWORD', '$SRC_DB_PASS_ESC');/define('DB_PASSWORD', '$DEST_DB_PASS_ESC');/g" ${!DEST_PATH}wp-config.php
if [ $multisite == true ] ; then
	sed -i -e "s/define('DOMAIN_CURRENT_SITE', '${!SRC_URL}')/define('DOMAIN_CURRENT_SITE', '${!DEST_URL}')/g;" ${!DEST_PATH}wp-config.php
fi
EOF
		#log into remote host, import database, search & replace urls and set owner for site files
		ssh ${!DEST_SSH_USER}@${!DEST_HOST} "mysql -u $DEST_DB_USER_ESC -p$DEST_DB_PASS_ESC ${!DEST_DB} < ${!DEST_PATH}${!SRC_DB}.sql; sudo -u ${!DEST_OWNER} -i -- wp search-replace ${network_param}${!SRC_URL} ${!DEST_URL} --path=${!DEST_PATH}; chown -R ${!DEST_OWNER}:${!DEST_GROUP} ${!DEST_PATH}"

	elif [ $src_id == "s" ] || [ $src_id == "p" ]; then
		if [[ $dest_id == "l" ]]; then
			ssh ${!SRC_SSH_USER}@${!SRC_HOST} "sudo -u ${!SRC_OWNER} -i -- wp search-replace ${network_param}${!SRC_URL} ${!DEST_URL} --path=${!SRC_PATH}"
		fi
ssh ${!SRC_SSH_USER}@${!SRC_HOST} /bin/bash << EOF
mysqldump -u $SRC_DB_USER_ESC -p$SRC_DB_PASS_ESC ${!SRC_DB} > ${!SRC_PATH}${!SRC_DB}.sql
EOF
		if [[ $dest_id == "l" ]]; then
			rsync -avO --exclude-from 'wploy-excludes.txt' -e ssh ${!SRC_SSH_USER}@${!SRC_HOST}:${!SRC_PATH} ${!DEST_PATH}
		else
			rsync -avO -e ssh ${l_path}wploy-excludes.txt ${!SRC_SSH_USER}@${!SRC_HOST}:${!SRC_PATH}
ssh ${!SRC_SSH_USER}@${!SRC_HOST} /bin/bash << EOF
rsync -avO --exclude-from ${!SRC_PATH}'wploy-excludes.txt' ${!SRC_PATH} ${!DEST_SSH_USER}@${!DEST_HOST}:${!DEST_PATH}
rm ${!SRC_PATH}wploy-excludes.txt
EOF
		fi
		ssh -t ${!SRC_SSH_USER}@${!SRC_HOST} "sudo rm ${!SRC_PATH}${!SRC_DB}.sql"
		if [[ $dest_id == "l" ]]; then
			# find and replace database credentials in wp-config on destination:
			sed -i -e "s/define('DB_NAME', '${!SRC_DB}');/define('DB_NAME', '${!DEST_DB}');/g; s/define('DB_USER', '$SRC_DB_USER_ESC');/define('DB_USER', '$DEST_DB_USER_ESC');/g; s/define('DB_PASSWORD', '$SRC_DB_PASS_ESC');/define('DB_PASSWORD', '$DEST_DB_PASS_ESC');/g" ${!DEST_PATH}wp-config.php

			# change ownership of files in new environment
			sudo chown -R ${!DEST_OWNER}:${!DEST_GROUP} ${!DEST_PATH}

			mysql -u $DEST_DB_USER_ESC -p$DEST_DB_PASS_ESC ${!DEST_DB} < ${!DEST_PATH}${!SRC_DB}.sql; sudo rm ${!DEST_PATH}${!SRC_DB}.sql

			ssh ${!SRC_SSH_USER}@${!SRC_HOST} "sudo -u ${!SRC_OWNER} -i -- wp search-replace ${network_param}${!DEST_URL} ${!SRC_URL} --path=${!SRC_PATH}"
		else
			# find and replace database credentials in wp-config on destination:
ssh ${!DEST_SSH_USER}@${!DEST_HOST} /bin/bash << EOF
sed -i -e "s/define('DB_NAME', '${!SRC_DB}');/define('DB_NAME', '${!DEST_DB}');/g; s/define('DB_USER', '$SRC_DB_USER_ESC');/define('DB_USER', '$DEST_DB_USER_ESC');/g; s/define('DB_PASSWORD', '$SRC_DB_PASS_ESC');/define('DB_PASSWORD', '$DEST_DB_PASS_ESC');/g" ${!DEST_PATH}wp-config.php
EOF
			ssh ${!DEST_SSH_USER}@${!DEST_HOST} "mysql -u $DEST_DB_USER_ESC -p$DEST_DB_PASS_ESC ${!DEST_DB} < ${!DEST_PATH}${!SRC_DB}.sql; sudo -u ${!DEST_OWNER} -i -- wp search-replace ${network_param}${!SRC_URL} ${!DEST_URL} --path=${!DEST_PATH}; sudo rm ${!DEST_PATH}${!SRC_DB}.sql; sudo chown -R ${!DEST_OWNER}:${!DEST_GROUP} ${!DEST_PATH}"
		fi
		if [[ $dest_id == "s" ]]; then
			#echo "activate code freeze"
			ssh ${!SRC_SSH_USER}@${!SRC_HOST} "sudo -u ${!SRC_OWNER} -i -- wp plugin activate code-freeze --allow-root --path=${!SRC_PATH}"
		fi
	fi
}

setupstaging() {
	echo "\nLet's get your staging area set up!\n"

	# Go ahead and set up a staging area on Serverpilot
 	NEWSTAGEAPP_OBJ=$(curl https://api.serverpilot.io/v1/apps -u $CLIENTID:$APIKEY -H "Content-Type: application/json" -d '{"name": "'$project_id'xstaging", "sysuserid": "'$STAGING_SYSID'", "runtime": "php5.4", "domains": ["'$project_id'.staging.yellowberri.com"]}')
 	stage_app_id=$(echo $NEWSTAGEAPP_OBJ | jq '.data | .id' | sed s/\"//g)
	curl https://api.serverpilot.io/v1/dbs -u $CLIENTID:$APIKEY -H "Content-Type: application/json" -d '{"appid": "'$stage_app_id'", "name": "'$project_id'_db", "user": {"name": "'${project_id:0:5}'_'$SECRET_CODE'", "password": "'$LIVE_DB_PASS_PREFIX''$SECRET_CODE'"}}'

	# set up keys from local to staging
	cat ~/.ssh/id_rsa.pub | ssh ${STAGING_SSH_USER}@${STAGING_HOST} "mkdir -p ~/.ssh && cat >>  ~/.ssh/authorized_keys"
	# we gotta set up our keys from staging to production
	ssh ${STAGING_SSH_USER}@${STAGING_HOST} "ssh-keygen -t id_rsa; ssh-copy-id ${PROD_SSH_USER}@${PROD_HOST}"
}

setupprod() {
	echo "\nLet's get that production server ssh set up!\n"
	# first, set up keys from local to production
	cat ~/.ssh/id_rsa.pub | ssh ${PROD_SSH_USER}@${PROD_HOST} "mkdir -p ~/.ssh && cat >>  ~/.ssh/authorized_keys"

	# we gotta set up our keys from production to staging as well -- also need to set up wp-cli on production server so we can enable code freeze when we need to
	ssh ${PROD_SSH_USER}@${PROD_HOST} "ssh-keygen -t id_rsa; ssh-copy-id ${STAGING_SSH_USER}@${STAGING_HOST}; curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar; chmod +x wp-cli.phar; sudo mv wp-cli.phar /usr/local/bin/wp"
}

project_id=""
purpose=""
intent=""
remote_id=""
multisite=false ## set up as single-site by default
network_param=""

# First, we want to set up some help documentation
while getopts ":h" opt; do
	case ${opt} in
		h )
			echo "Usage:"
			echo "	wploy -h"
			echo "	wploy<project_id> [-m <l2s><l2p><s2p><p2s> [-n <multisite>]]"
			echo "	wploy <project_id> [-s <staging><prod>]"
			exit 0
			;;
		\? )
			echo "Invalid Option: -$OPTARG" 1>&2
			exit 1
			;;
	esac
done
shift $((OPTIND -1))

project_id=$1; shift

# load wp-init config file
# . wpinit.config
. ${BASH_SOURCE[0]/%wploy/wpinit.config}

if [[ $project_id && ${project_id} ]] ; then
	# load project wploy config file
	# . wploy.config
	. ~/Sites/$project_id/web/wploy.config

	# set up available commands
	declare -a cmds=('l2s' 'l2p' 's2l' 's2p' 'p2l' 'p2s')

	#make sure were in the right directory and everything...
	cd ~/Sites/$project_id/web/

	while getopts ":s:nm:" opt; do
		case $opt in
			s )
				remote_id=$OPTARG
				if [ $remote_id == "staging" ] ; then
					setupstaging
				elif [ $remote_id == "prod" ] ; then
					setupprod
				else
					echo "I don't recognize the target server..."
					exit 1
				fi
				;;
			m )
				intent=$OPTARG
				if in_array cmds "${intent}"; then
					src_id="${intent::1}"
					dest_id="${intent: -1}"

					SRC_HOST="${src_id}_host"
					SRC_SSH_USER="${src_id}_ssh_user"
					SRC_DB="${src_id}_db"
					SRC_DB_USER="${src_id}_db_user"
					SRC_DB_PASS="${src_id}_db_pass"
					SRC_PATH="${src_id}_path"
					SRC_URL="${src_id}_url"
					SRC_OWNER="${src_id}_owner"

					SRC_DB_USER_ESC=$(sed 's/[\*\.&]/\\&/g' <<<"${!SRC_DB_USER}")
					SRC_DB_PASS_ESC=$(sed 's/[\*\.&]/\\&/g' <<<"${!SRC_DB_PASS}")

					DEST_HOST="${dest_id}_host"
					DEST_SSH_USER="${dest_id}_ssh_user"
					DEST_DB="${dest_id}_db"
					DEST_DB_USER="${dest_id}_db_user"
					DEST_DB_PASS="${dest_id}_db_pass"
					DEST_PATH="${dest_id}_path"
					DEST_URL="${dest_id}_url"
					DEST_OWNER="${dest_id}_owner"
					DEST_GROUP="${dest_id}_group"

					DEST_DB_USER_ESC=$(sed 's/[\*\.&]/\\&/g' <<<"${!DEST_DB_USER}")
					DEST_DB_PASS_ESC=$(sed 's/[\*\.&]/\\&/g' <<<"${!DEST_DB_PASS}")
				else
					echo "I didn't understand what you're trying to do..."
					exit 1
				fi

				# checkintent
				migrate
				;;
			n )
				multisite=true
				;;
			\? )
				echo "Invalid option: -$OPTARG" 1>&2
				;;
			: )
				echo "Invalid option: $OPTARG requires an argument" 1>&2
				;;
		esac
		shift $((OPTIND -1))
	done
else
	echo "Project ID not specified! Stop wasting my time."
	exit
fi
