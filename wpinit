#!/bin/sh
#
# Script to setup local directories, databases and server for new site development
#

## SETTINGS ================================================================================== #

# First, set up config for local host domain
# Wait where are the settings?! There are in wpinit.config

## END SETTINGS - DON'T TOUCH ANYTHING ELSE! ====================================================== #

##

# Here's some helper functions
pause() {
	read -p "$*"
}

continueprompt() {
	read ifcontinue

	case $ifcontinue in
		[nN] | [n|N][O|o] )
			clear
			echo "---------------------------------------------------------------------------"
			pause "Oh, well... I didn't want to play anyway. Press [Enter] to exit."
			clear
			exit
			;;
		[yY] | [yY][Ee][Ss] )
			# Just continue script if user chooses "yes"
			;;
		* )
			echo "\n---------------------------------------------------------------------------"
			echo "Huh?"
			echo "---------------------------------------------------------------------------\n"
			continueprompt
			;;
	esac
}

purposeprompt() {
	echo "A) I need to initialize a new Wordpress project."
	echo "B) I'm collaborating on this project and I just need to clone it to use on my local machine."
	echo "C) I just want to delete some stuff."
	echo "D) Nevermind, get me out of here so I can start over.\n"

	read purpose_opt

	case $purpose_opt in
		a|A )
			purpose="startclean"
			;;
		b|B )
			purpose="collab"
			;;
		c|C )
			purpose="delete"
			;;
		d|D )
			echo "\n---------------------------------------------------------------------------"
			echo "Goodbye."
			echo "---------------------------------------------------------------------------\n"
			exit
			;;
		* )
			echo "\n---------------------------------------------------------------------------"
			echo "I didn't understand that. Do what now?"
			echo "---------------------------------------------------------------------------\n"
			purposeprompt
			;;
	esac
}

checkprojectexists () {
	# Check project_id value against existing directories
	if [ -d $SITES_DIR/$project_id ]; then #check if project directory already exists
		if [ -d $SITES_DIR/$project_id/web/wp-content ]; then #check if project exists as a wordpress install
			echo "\n---------------------------------------------------------------------------"
			echo "A Wordpress installation for \"$project_id\" already exists!"
			echo "---------------------------------------------------------------------------\n"
			EMPTY_DIR=false
		else
			echo "\n---------------------------------------------------------------------------"
			echo "This directory already exists...but it doesn't have a site started yet!"
			echo "---------------------------------------------------------------------------\n"
			pause "Press [Enter] to copy site files over."
			EMPTY_DIR=true
		fi

		NEW_PROJECT=false
	else
		NEW_PROJECT=true #if project directory doesn't exist, continue site init as new project
	fi # end check if project directory already exists
}

preinit () {
	# Now we need to decide which type of project this is going to be?
	clear

	checkprojectexists

	if $NEW_PROJECT ; then
		echo "\n---------------------------------------------------------------------------"
		echo "A new project called '$project_id' is about to be created and initialized."
		echo "Continue? [y/N]"
		echo "---------------------------------------------------------------------------\n"
		continueprompt
	else
		if [ $EMPTY_DIR == false ] ; then
			echo "\n---------------------------------------------------------------------------"
			echo "Do you want to delete the current site files and start from scratch?"
			echo "WARNING: This will delete any database associated with this site! [y/N]"
			echo "---------------------------------------------------------------------------\n"
			continueprompt
			echo "\n---------------------------------------------------------------------------"
			echo "Are you sure??!? [y/N]"
			echo "---------------------------------------------------------------------------\n"
			continueprompt
			echo "\n---------------------------------------------------------------------------"
			echo "REALLY?? [y/N]"
			echo "---------------------------------------------------------------------------\n"
			continueprompt
			echo "\n---------------------------------------------------------------------------"
			pause "Oh well, suit yourself... press [Enter] to delete the files & directories (and database, if applicable)."
			rm -rf $SITES_DIR/$project_id/web

			clear
			$MYSQL_BIN/mysqladmin -u$LOCAL_DB_USER -p$LOCAL_DB_PASS drop $project_id
		fi
	fi
}

copyfiles () {
	if [ $purpose == "startclean" ] ; then
		if [ "$(git ls-remote https://${GITUSER}:${GITPASS}@bitbucket.org/$GITUSER/${project_id}.git 2> /dev/null)" ]; then
			clear
			echo "\n---------------------------------------------------------------------------"
			echo "Oh, wait. A repository for \"$project_id\" already exists. Get outta here!"
			echo "---------------------------------------------------------------------------\n"
			exit
		else
			clear
			# Tell the user that the proper files are being copied over
			echo "\nNew project directory created...\nGrabbing the latest version of Wordpress and getting everything set up.\n"

			# create the wordpress directory structure
			mkdir -p $SITES_DIR/$project_id/{web,_working_/{docs,images}}

			# copy wireframes and styletile files over
			#cp -r $WPINIT_DIR/design/* $SITES_DIR/$project_id/web/design

			# get latest version of Wordpress and extract files to project directory
			curl -L -o $SITES_DIR/$project_id/wp.temp.tar.gz http://wordpress.org/latest.tar.gz
			tar -xzf $SITES_DIR/$project_id/wp.temp.tar.gz -C $SITES_DIR/$project_id/web
			# delete the temporary Wordpress zip file
			rm $SITES_DIR/$project_id/wp.temp.tar.gz
			# move the Wordpress files from the "wordpress" default directory up into the "web" folder and then delete the "wordpress" folder
			mv $SITES_DIR/$project_id/web/wordpress/* $SITES_DIR/$project_id/web
			rm -R $SITES_DIR/$project_id/web/wordpress

			# move the config files, .htaccess, .gitignore, etc. over
			cp $WPINIT_DIR/wordpress/wp-config.php $SITES_DIR/$project_id/web/wp-config.php
			cp $WPINIT_DIR/wordpress/wploy.config $SITES_DIR/$project_id/web/wploy.config
			cp $WPINIT_DIR/wordpress/Gruntfile.js $SITES_DIR/$project_id/web/Gruntfile.js
			cp $WPINIT_DIR/wordpress/package.json $SITES_DIR/$project_id/web/package.json
			cp $WPINIT_DIR/wordpress/wploy-excludes.txt $SITES_DIR/$project_id/web/wploy-excludes.txt

			cp $WPINIT_DIR/wordpress/install.php $SITES_DIR/$project_id/web/wp-content/install.php
			cp $WPINIT_DIR/wordpress/.htaccess $SITES_DIR/$project_id/web/.htaccess
			cp $WPINIT_DIR/wordpress/.gitignore $SITES_DIR/$project_id/.gitignore

			# copy the grunt node modules over
			mkdir $SITES_DIR/$project_id/web/node_modules
			cp -r $WPINIT_DIR/wordpress/node_modules/* $SITES_DIR/$project_id/web/node_modules

			# delete any default themes and set up our custom yb theme
			rm -rf $SITES_DIR/$project_id/web/wp-content/themes/*/* && rmdir $SITES_DIR/$project_id/web/wp-content/themes/*
			mkdir $SITES_DIR/$project_id/web/wp-content/themes/yb
			cp -r $WPINIT_DIR/wordpress/yb/* $SITES_DIR/$project_id/web/wp-content/themes/yb

			# delete any default plugins and install our plugins folder
			rm -R $SITES_DIR/$project_id/web/wp-content/plugins
			cp -r $WPINIT_DIR/wordpress/plugins $SITES_DIR/$project_id/web/wp-content
		fi
	elif [ $purpose == "collab" ] ; then
		# Clone the files from the repository
		echo "\nCloning project files from repository...\n"

		# Create the empty project directory, if it doesn't already exist
		if [ ! -d $SITES_DIR/$project_id ] ; then
			mkdir $SITES_DIR/$project_id
		fi

		# Clone the files...
		git clone https://$GITUSER:$GITPASS@bitbucket.org/$GITUSER/$project_id $SITES_DIR/$project_id
	fi
}

writeconfigs () {
	if [ $purpose == "startclean" ] ; then
		#WP-CONFIG
		sed -i '' "s/\$project_id = '.*';/\$project_id = '$project_id';/g" $WPCONFIGFILE

		sed -i '' "s/\$prod_preview_url_base = '.*';/\$prod_preview_url_base = '$PREVIEW_URL_BASE';/g" $WPCONFIGFILE
		sed -i '' "s/\$staging_url_base = '.*';/\$staging_url_base = '$STAGING_URL_BASE';/g" $WPCONFIGFILE
		if [[ $PRODUCTION_URL && ${PRODUCTION_URL} ]] ; then
			sed -i '' "s/\$prod_domain = '.*';/\$prod_domain = '$PRODUCTION_URL';/g" $WPCONFIGFILE
		fi
		sed -i '' "s/define('DB_NAME', '');/\define('DB_NAME', '$project_id');/g" $WPCONFIGFILE
		sed -i '' "s/define('DB_USER', '');/\define('DB_USER', '$LOCAL_DB_USER');/g" $WPCONFIGFILE
		sed -i '' "s/define('DB_PASSWORD', '');/\define('DB_PASSWORD', '$LOCAL_DB_PASS');/g" $WPCONFIGFILE
		sed -i '' "s/\$table_prefix  = '';/\$table_prefix = '$project_id$SECRET_CODE';/g" $WPCONFIGFILE
		# get salts
		CONFIGTEMP=$SITES_DIR/$project_id/web/wp-config_temp.php
		curl -s https://api.wordpress.org/secret-key/1.1/salt | awk -f $WPINIT_DIR/salt_replacer.awk - $WPCONFIGFILE > $CONFIGTEMP
		mv $CONFIGTEMP $WPCONFIGFILE

		rm $SITES_DIR/$project_id/web/wp-config-sample.php

		#WPLOY CONFIG
		sed -i '' "s/l_db=/l_db=$project_id/g" $WPLOYCONFIGFILE
		sed -i '' "s/l_db_user=/l_db_user=$LOCAL_DB_USER/g" $WPLOYCONFIGFILE
		sed -i '' "s/l_db_pass=/l_db_pass=$LOCAL_DB_PASS/g" $WPLOYCONFIGFILE
		sed -i '' "s/l_url=/l_url=$project_id.$LOCAL_URL_BASE/g" $WPLOYCONFIGFILE

		sed -i '' "s/s_host=/s_host=$STAGING_HOST/g" $WPLOYCONFIGFILE
		sed -i '' "s/s_ssh_user=/s_ssh_user=$STAGING_SSH_USER/g" $WPLOYCONFIGFILE
		sed -i '' "s/s_ssh_pass=/s_ssh_pass=$STAGING_SSH_PASS/g" $WPLOYCONFIGFILE
		sed -i '' "s/s_db=/s_db=${project_id}_db/g" $WPLOYCONFIGFILE
		sed -i '' "s/s_db_user=/s_db_user=admin_$SECRET_CODE/g" $WPLOYCONFIGFILE
		sed -i '' "s/s_db_pass=/s_db_pass=$project_id$LIVE_DB_PASS_SUFFIX/g" $WPLOYCONFIGFILE
		sed -i '' "s/s_path=/s_path=apps\\/${project_id}xstaging\\/public\\//g" $WPLOYCONFIGFILE
		sed -i '' "s/s_url=/s_url=$project_id.$STAGING_URL_BASE/g" $WPLOYCONFIGFILE

		sed -i '' "s/p_host=/p_host=$PROD_HOST/g" $WPLOYCONFIGFILE
		sed -i '' "s/p_ssh_user=/p_ssh_user=$PROD_SSH_USER/g" $WPLOYCONFIGFILE
		sed -i '' "s/p_ssh_pass=/p_ssh_pass=$PROD_SSH_PASS/g" $WPLOYCONFIGFILE
		sed -i '' "s/p_db=/p_db=${project_id}_db/g" $WPLOYCONFIGFILE
		sed -i '' "s/p_db_user=/p_db_user=admin_$SECRET_CODE/g" $WPLOYCONFIGFILE
		sed -i '' "s/p_db_pass=/p_db_pass=$project_id$LIVE_DB_PASS_SUFFIX/g" $WPLOYCONFIGFILE
		sed -i '' "s/p_path=/p_path=apps\\/${project_id}\\/public\\//g" $WPLOYCONFIGFILE
		if [[ $PRODUCTION_URL && ${PRODUCTION_URL} ]] ; then
			sed -i '' "s/p_url=/p_url=$PRODUCTION_URL/g" $WPLOYCONFIGFILE
		fi

		#Gruntfile.js
		sed -i '' "s/projectID: '',/projectID: '$project_id',/g" $GRUNTFILE
		#package.json
		sed -i '' "s/\"name\": \"\",/\"name\": \"$project_id\",/g" $GRUNTPACKAGEFILE
		sed -i '' "s/\"description\": \"Website\",/\"description\": \"$project_id Website\",/g" $GRUNTPACKAGEFILE
	fi

	# sed -i '' "s/\$local_url_base = '.*';/\$local_url_base = '$LOCAL_URL_BASE';/g" $WPCONFIGFILE

}

setup_db () {
	if [ $purpose == "startclean" ] ; then
		if [ -d "$DB_DIR/$project_id" ]; then
			echo "\n---------------------------------------------------------------------------"
			echo "Database \"$project_id\" already exists!"
			echo "---------------------------------------------------------------------------\n"
			exit
		else
			# Create the empty database
			$MYSQL_BIN/mysqladmin -u$LOCAL_DB_USER -p$LOCAL_DB_PASS create $project_id
			# Go ahead and dump the database to a SQL file so we can push it to the git repo, just in case.
			mkdir $SITES_DIR/$project_id/db
			$MYSQL_BIN/mysqldump -u$LOCAL_DB_USER -p$LOCAL_DB_PASS $project_id > $SITES_DIR/$project_id/db/${project_id}_db.sql
		fi
	elif [ $purpose == "collab" ] ; then
		if [ -d "$DB_DIR/$project_id" ]; then
			$MYSQL_BIN/mysqladmin -u$LOCAL_DB_USER -p$LOCAL_DB_PASS drop $project_id
		fi

		# Create the empty database
		$MYSQL_BIN/mysqladmin -u$LOCAL_DB_USER -p$LOCAL_DB_PASS create $project_id
		# Import the saved sql file to the database
		$MYSQL_BIN/mysql -u$LOCAL_DB_USER -p$LOCAL_DB_PASS $project_id < $SITES_DIR/$project_id/db/${project_id}_db.sql
	fi
}

install_wp() {
	#cd to working directory, using the alias we just set up
	cd $SITES_DIR/$project_id/web
	# then, install wordpress...you'll need to install wp-cli for this to work! (http://wp-cli.org/)
	wp core install --url="http://${PRODUCTION_URL}" --title="${project_id}" --admin_user="${project_id}-admin" --admin_password="${project_id}${LIVE_DB_PASS_SUFFIX}" --admin_email="${ADMIN_EMAIL}"
}

# gitsetup () {
# 	if [ $purpose == "startclean" ] ; then
# 		#set up git on remote server
# 		if [ $1 == "bitbucket" ] ; then
# 			echo "---------------------------------------------------------------------------"
# 			echo "Setting up remote repository...Please enter a short description for this repository."
# 			echo "---------------------------------------------------------------------------\n"
# 			read repo_desc

# 			#script for bitbucket repo initialization
# 			curl -k -X POST --user $GITUSER:$GITPASS "https://api.bitbucket.org/1.0/repositories" -d "name=$project_id" -d "description=$repo_desc" -d "is_private=true"

# 			# Setting up the service hook on bitbucket end for pushing to staging server
# 			##curl -k -X POST --user $GITUSER:$GITPASS "https://api.bitbucket.org/1.0/repositories/$GITUSER/$project_id/services/" -d "repo_slug=$project_id" -d "type=POST" -d "URL=http://$STAGING_IP/$scipt_loc/staging-script.php?repo_name=$project_id"
# 		fi

# 		# Initialize local Git repository and push it to the remote repo
# 		git init $SITES_DIR/$project_id
# 		git --git-dir=/$SITES_DIR/$project_id/.git --work-tree=$SITES_DIR/$project_id add .
# 		git --git-dir=/$SITES_DIR/$project_id/.git --work-tree=$SITES_DIR/$project_id commit -am 'Initial Commit'

# 		if [ $1 == "bitbucket" ] ; then
# 			git --git-dir=/$SITES_DIR/$project_id/.git --work-tree=$SITES_DIR/$project_id push https://$GITUSER:$GITPASS@bitbucket.org/$GITUSER/$project_id master
# 		fi
# 	fi

# 	# Creates the pre-commit .git hook
# 	# cat > $SITES_DIR/$project_id/.git/hooks/pre-commit <<- EOF
# 	# 	#!/bin/sh
# 	# 	# dumps the db into an .sql file before adding it to the repo
# 	# 	$MYSQL_BIN/mysqldump -u$LOCAL_DB_USER -p$LOCAL_DB_PASS $project_id > $SITES_DIR/$project_id/db/${project_id}_db.sql
# 	# 	# change to the project directory
# 	# 	cd $SITES_DIR/$project_id
# 	# 	# add the db file to the repo
# 	# 	git add db/${project_id}_db.sql
# 	# EOF
# 	# # Make executable
# 	# chmod +x $SITES_DIR/$project_id/.git/hooks/pre-commit

# 	# # Creates the post-merge .git hook
# 	# cat > $SITES_DIR/$project_id/.git/hooks/post-merge <<- EOF0
# 	# 	#!/bin/sh
# 	# 	# get the db .sql file from the cloned repo and imports it to the server
# 	# 	$MYSQL_BIN/mysql -u$LOCAL_DB_USER -p$LOCAL_DB_PASS $project_id < $SITES_DIR/$project_id/db/${project_id}_db.sql
# 	# 	# updates the db on the local machine with the proper local host information
# 	# 	$MYSQL_BIN/mysql -u$LOCAL_DB_USER -p$LOCAL_DB_PASS <<- EOF
# 	# 		use $project_id;
# 	# 		UPDATE ${project_id}${SECRET_CODE}_options SET option_value='http://${project_id}.${LOCAL_HOST}' WHERE option_name='siteurl' OR option_name='home';
# 	# 	EOF
# 	# 	# update the wp-config file
# 	# 	sed -i.bak "s/\\\$local_host_base = '.*';/\\\$local_host_base = '$LOCAL_HOST';/" $CONFIGFILE
# 	# EOF0
# 	# # Make executable
# 	# chmod +x $SITES_DIR/$project_id/.git/hooks/post-merge


# }

writevhost () {
	echo "Writing Virtual Host..."

	cat > $VHOSTS_DIR/$project_id.conf <<- EOF
	<VirtualHost *:80>
	DocumentRoot "$SITES_DIR/$project_id/web"
	ServerName $project_id.$LOCAL_URL_BASE
	ErrorLog "$LOGS_DIR/error_log"
	CustomLog "$LOGS_DIR/access_log" common
	<Directory "$SITES_DIR/$project_id/web">
	Order allow,deny
	Allow from all
	</Directory>
	</VirtualHost>
	EOF
}

writesublimeproject () {
	# Write the project file for sublime text
	cat > $SUBLIMETEXTPROJECTS_DIR/$project_id.sublime-project <<- EOF
	{
		"folders":
		[
			{
				"name": "$project_id Root",
				"path": "$SITES_DIR/$project_id"
			},
			{
				"name":"Site Plugins",
				"path": "$SITES_DIR/$project_id/web/wp-content/plugins"
			},
			{
				"name": "YB Theme Files",
				"path": "$SITES_DIR/$project_id/web/wp-content/themes/yb"
			}
		]
	}
	EOF
}

setup_remotes() {
 	# first, production app & db (NEED TO INSTALL JQ FOR THIS TO WORK! - homebrew install: brew install jq)
	if [[ $PRODUCTION_URL && ${PRODUCTION_URL} ]] ; then
		PROD_URL=$PRODUCTION_URL
	else
		PROD_URL="$project_id.com"
	fi
 	NEWPRODAPP_OBJ=$(curl https://api.serverpilot.io/v1/apps -u $CLIENTID:$APIKEY -H "Content-Type: application/json" -d '{"name": "'$project_id'", "sysuserid": "'$PROD_SYSID'", "runtime": "php5.4", "domains": ["'$PRODUCTION_URL'", "www.'$PRODUCTION_URL'", "'$project_id'.preview.yellowberri.com"]}')
 	prod_app_id=$(echo $NEWPRODAPP_OBJ | jq '.data | .id' | sed s/\"//g)
	curl https://api.serverpilot.io/v1/dbs -u $CLIENTID:$APIKEY -H "Content-Type: application/json" -d '{"appid": "'$prod_app_id'", "name": "'$project_id'_db", "user": {"name": "admin_'$SECRET_CODE'", "password": "'$LIVE_DB_PASS_PREFIX''$SECRET_CODE'"}}'
	# now, staging
 	NEWSTAGEAPP_OBJ=$(curl https://api.serverpilot.io/v1/apps -u $CLIENTID:$APIKEY -H "Content-Type: application/json" -d '{"name": "'$project_id'xstaging", "sysuserid": "'$STAGING_SYSID'", "runtime": "php5.4", "domains": ["'$project_id'.staging.yellowberri.com"]}')
 	stage_app_id=$(echo $NEWSTAGEAPP_OBJ | jq '.data | .id' | sed s/\"//g)
	curl https://api.serverpilot.io/v1/dbs -u $CLIENTID:$APIKEY -H "Content-Type: application/json" -d '{"appid": "'$stage_app_id'", "name": "'$project_id'_db", "user": {"name": "admin_'$SECRET_CODE'", "password": "'$LIVE_DB_PASS_PREFIX''$SECRET_CODE'"}}'
}

restartapache () {
	echo "\nRestarting Apache!"
	sudo $APACHE_DIR/apachectl -k restart
}

siteinit () {
	# Test for project existence, start from scratch if necessary, and define type of project
	preinit

	# Add handy terminal command for quickly getting to project directory
	echo 'alias '$project_id'="cd '$SITES_DIR'/'$project_id'/web"' >> ~/.sites

	# Go ahead and copy relevant files to the project directory.
	copyfiles

	# Use the config info to alter the wp-config file.
	writeconfigs

	#Now, we need to create the local database (if it doesn't already exist)
	setup_db

	#Let's go ahead and install our Wordpress site! (as long as wp-cli is installed)
	if hash wp 2>/dev/null; then
		install_wp
	fi

	# # configure project version control
	# # gitsetup "bitbucket"

	# If necessary, write the ip exception in hosts file for the new site (uncomment the next line) *this is especially useful for proxy server set up*
	sudo bash -c "echo '127.0.0.1 $project_id.$LOCAL_URL_BASE' >> /private/etc/hosts"

	# # Write new virtual host file for the new site
	writevhost

	# # # Write the sublime text project file
	writesublimeproject

	# #set owner permissions for the wordpress directory
	sudo chown -R $OWNER: $SITES_DIR/$project_id/web
 	sudo chmod -R g+w $SITES_DIR/$project_id/web

 	# set up project live AND staging environments on serverpilot
 	setup_remotes

	# Finally, restart apache!
	restartapache
	clear
	echo "---------------------------------------------------------------------------"
	echo "...done! Your site is now ready to work on."
	echo "---------------------------------------------------------------------------\n"
}

# Let's get started.
# Check whether or not a project ID was supplied
if [[ $1 && ${1} ]] ; then
	project_id=$1

	# load config file
	# . wpinit.config
	source ${BASH_SOURCE[0]/%wpinit/wpinit.config}
	if [[ $2 && ${2} ]] ; then
		PRODUCTION_URL=$2
	fi

	clear
	echo "---------------------------------------------------------------------------"
	echo "What is the purpose of this initialization?"
	echo "---------------------------------------------------------------------------\n"
	purposeprompt

	siteinit
else
	echo "Project ID not set! Stop wasting my time."
	exit
fi
