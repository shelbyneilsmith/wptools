#!/bin/sh
#
# Script to setup local directories, databases and server for new site development
#

## SETTINGS ================================================================================== #

# First, set up config for local host domain
# Wait where are the settings?! There are in wpinit.config

## END SETTINGS - DON'T TOUCH ANYTHING ELSE! ====================================================== #

##

# Here's some helper functions
pause() {
	read -p "$*"
}

continueprompt() {
	read ifcontinue

	case $ifcontinue in
		[nN] | [n|N][O|o] )
			clear
			echo "---------------------------------------------------------------------------"
			pause "Oh, well... I didn't want to play anyway. Press [Enter] to exit."
			clear
			exit
			;;
		[yY] | [yY][Ee][Ss] )
			# Just continue script if user chooses "yes"
			;;
		* )
			echo "\n---------------------------------------------------------------------------"
			echo "Huh?"
			echo "---------------------------------------------------------------------------\n"
			continueprompt
			;;
	esac
}

checkprojectexists () {
	# Check project_id value against existing directories
	if [ -d $SITES_DIR/$project_id ]; then #check if project directory already exists
		if [ -d $SITES_DIR/$project_id/web/wp-content ]; then #check if project exists as a wordpress install
			echo "\n---------------------------------------------------------------------------"
			echo "A Wordpress installation for \"$project_id\" already exists!"
			echo "---------------------------------------------------------------------------\n"
			EMPTY_DIR=false
		else
			echo "\n---------------------------------------------------------------------------"
			echo "This directory already exists...but it doesn't have a site started yet!"
			echo "---------------------------------------------------------------------------\n"
			pause "Press [Enter] to copy site files over."
			EMPTY_DIR=true
		fi

		NEW_PROJECT=false
	else
		NEW_PROJECT=true #if project directory doesn't exist, continue site init as new project
	fi # end check if project directory already exists
}

preinit () {
	# Now we need to decide which type of project this is going to be?
	clear

	checkprojectexists

	if $NEW_PROJECT ; then
		echo "\n---------------------------------------------------------------------------"
		echo "A new project called '$project_id' is about to be created and initialized."
		echo "Continue? [y/N]"
		echo "---------------------------------------------------------------------------\n"
		continueprompt
	else
		if [ $EMPTY_DIR == false ] ; then
			echo "\n---------------------------------------------------------------------------"
			echo "Do you want to delete the site files associated with this project ID and start from scratch?"
			echo "WARNING: This will also delete any database and config files associated with this site! [y/N]"
			echo "---------------------------------------------------------------------------\n"
			continueprompt

			sitedelete

			echo "\n---------------------------------------------------------------------------"
			pause "Ok, we're clean. Press [Enter] when you're ready to start your new site."
		fi
	fi
}

copyfiles () {
	clear
	# create the wordpress directory structure
	mkdir -p $SITES_DIR/$project_id/{web,_working_/{docs,images}}
	echo "\nNew project directory created..."

	if [ $purpose == "new" ] ; then
		# Tell the user that the proper files are being copied over
		echo "\nGrabbing the latest version of Wordpress and getting everything set up.\n"


		# copy wireframes and styletile files over
		#cp -r $WPINIT_DIR/design/* $SITES_DIR/$project_id/web/design

		# get latest version of Wordpress and extract files to project directory
		curl -L -o $SITES_DIR/$project_id/wp.temp.tar.gz http://wordpress.org/latest.tar.gz
		tar -xzf $SITES_DIR/$project_id/wp.temp.tar.gz -C $SITES_DIR/$project_id/web
		# delete the temporary Wordpress zip file
		rm $SITES_DIR/$project_id/wp.temp.tar.gz
		# move the Wordpress files from the "wordpress" default directory up into the "web" folder and then delete the "wordpress" folder
		mv $SITES_DIR/$project_id/web/wordpress/* $SITES_DIR/$project_id/web
		rm -R $SITES_DIR/$project_id/web/wordpress

		echo "\nMoving files to new worpress site!\n"

		# move the config files, .htaccess, .gitignore, etc. over
		rsync -a --info=progress2 $WPINIT_DIR/wordpress/wp-config.php $SITES_DIR/$project_id/web/wp-config.php
		rsync -a --info=progress2 $WPINIT_DIR/wordpress/wploy.config $SITES_DIR/$project_id/web/wploy.config
		rsync -a --info=progress2 $WPINIT_DIR/wordpress/Gruntfile.js $SITES_DIR/$project_id/web/Gruntfile.js
		rsync -a --info=progress2 $WPINIT_DIR/wordpress/package.json $SITES_DIR/$project_id/web/package.json
		rsync -a --info=progress2 $WPINIT_DIR/wordpress/wploy-excludes.txt $SITES_DIR/$project_id/web/wploy-excludes.txt

		rsync -a --info=progress2 $WPINIT_DIR/wordpress/install.php $SITES_DIR/$project_id/web/wp-content/install.php
		rsync -a --info=progress2 $WPINIT_DIR/wordpress/.htaccess $SITES_DIR/$project_id/web/.htaccess

		# copy the grunt node modules over
		# mkdir $SITES_DIR/$project_id/web/node_modules
		rsync -a --info=progress2 $WPINIT_DIR/wordpress/node_modules $SITES_DIR/$project_id/web/

		# delete any default themes and set up our custom yb theme
		find $SITES_DIR/$project_id/web/wp-content/themes/ -mindepth 1 -maxdepth 1 -type d -exec rm -rf {} +
		rsync -a --info=progress2 --delete $WPINIT_DIR/wordpress/yb $SITES_DIR/$project_id/web/wp-content/themes

		# delete any default plugins and install our plugins folder
		rm -R $SITES_DIR/$project_id/web/wp-content/plugins
		rsync -a --info=progress2 $WPINIT_DIR/wordpress/plugins $SITES_DIR/$project_id/web/wp-content/

		echo "\nOkay. Done moving files!\n"
	elif [ $purpose == "collab" ] ; then
		# Clone the files from the repository
		echo "\nPulling down files from staging...\n"

		if (ssh $STAGING_SSH_USER@$STAGING_HOST "[ -d apps/${project_id}xstaging ]"); then
			# Check if staging site exists and pull files down, if it does
			rsync -avO -e ssh $STAGING_SSH_USER@$STAGING_HOST:apps/${project_id}xstaging/public/ $SITES_DIR/$project_id/web

			sed -i '' "s/define('DB_NAME', '.*');/\define('DB_NAME', '$project_id');/g" $WPCONFIGFILE
			sed -i '' "s/define('DB_USER', '.*');/\define('DB_USER', '$LOCAL_DB_USER');/g" $WPCONFIGFILE
			sed -i '' "s/define('DB_PASSWORD', '.*');/\define('DB_PASSWORD', '$LOCAL_DB_PASS');/g" $WPCONFIGFILE
		fi
	fi
}

writeconfigs () {
	#WP-CONFIG
	sed -i '' "s/\$project_id = '.*';/\$project_id = '$project_id';/g" $WPCONFIGFILE

	sed -i '' "s/\$prod_preview_url_base = '.*';/\$prod_preview_url_base = '$PREVIEW_URL_BASE';/g" $WPCONFIGFILE
	sed -i '' "s/\$staging_url_base = '.*';/\$staging_url_base = '$STAGING_URL_BASE';/g" $WPCONFIGFILE
	if [[ $prod_domain && ${prod_domain} ]] ; then
		prod_domain=$prod_domain
	else
		prod_domain=$project_id.com
	fi
	sed -i '' "s/\$prod_domain = '.*';/\$prod_domain = '$prod_domain';/g" $WPCONFIGFILE
	sed -i '' "s/define('DB_NAME', '');/\define('DB_NAME', '$project_id');/g" $WPCONFIGFILE
	sed -i '' "s/define('DB_USER', '');/\define('DB_USER', '$LOCAL_DB_USER');/g" $WPCONFIGFILE
	sed -i '' "s/define('DB_PASSWORD', '');/\define('DB_PASSWORD', '$LOCAL_DB_PASS');/g" $WPCONFIGFILE
	sed -i '' "s/\$table_prefix  = '';/\$table_prefix = '$project_id$SECRET_CODE';/g" $WPCONFIGFILE
	# get salts
	SALTS=$(curl -L https://api.wordpress.org/secret-key/1.1/salt/)
	SALT_STRING='__salts__'
	printf '%s\n' "g/$SALT_STRING/d" a "$SALTS" . w | ed -s $WPCONFIGFILE

	rm $SITES_DIR/$project_id/web/wp-config-sample.php

	# now we need to install and configure our default plugins
	plugin_serials_arr=()

	for plugin in $PLUGINS; do
		SERIAL_KEY=$(cat $WPINIT_DIR/plugins.json | jq -r ".plugins[] | select(.name == \"$plugin\") | .serial_key")

		if [ "$SERIAL_KEY" != 'null' ]; then
			KEY_CONSTANT=$(cat $WPINIT_DIR/plugins.json | jq -r ".plugins[] | select(.name == \"$plugin\") | .serial_key | .key_constant")
			KEY_VALUE=$(cat $WPINIT_DIR/plugins.json | jq -r ".plugins[] | select(.name == \"$plugin\") | .serial_key | .key_value")

			plugin_serials_arr+=("define('$KEY_CONSTANT','$KEY_VALUE');")
		fi
	done

	plugin_keys=${plugin_serials_arr[@]}
	sed -i '' "s#__plugin_keys__#$plugin_keys#" $WPCONFIGFILE


	#WPLOY CONFIG
	sed -i '' "s/l_db=/l_db=$project_id/g" $WPLOYCONFIGFILE
	sed -i '' "s/l_db_user=/l_db_user=$LOCAL_DB_USER/g" $WPLOYCONFIGFILE
	sed -i '' "s/l_db_pass=/l_db_pass=$LOCAL_DB_PASS/g" $WPLOYCONFIGFILE
	sed -i '' "s/l_url=/l_url=$project_id.$LOCAL_URL_BASE/g" $WPLOYCONFIGFILE

	sed -i '' "s/s_host=/s_host=$STAGING_HOST/g" $WPLOYCONFIGFILE
	sed -i '' "s/s_ssh_user=/s_ssh_user=$STAGING_SSH_USER/g" $WPLOYCONFIGFILE
	sed -i '' "s/s_ssh_pass=/s_ssh_pass=$STAGING_SSH_PASS/g" $WPLOYCONFIGFILE
	sed -i '' "s/s_db=/s_db=${project_id}_db/g" $WPLOYCONFIGFILE
	sed -i '' "s/s_db_user=/s_db_user=${project_id:0:5}_$SECRET_CODE/g" $WPLOYCONFIGFILE
	sed -i '' "s/s_db_pass=/s_db_pass=${LIVE_DB_PASS_PREFIX}$SECRET_CODE/g" $WPLOYCONFIGFILE
	sed -i '' "s/s_path=/s_path=apps\\/${project_id}xstaging\\/public\\//g" $WPLOYCONFIGFILE
	sed -i '' "s/s_url=/s_url=$project_id.$STAGING_URL_BASE/g" $WPLOYCONFIGFILE

	sed -i '' "s/p_host=/p_host=$PROD_HOST/g" $WPLOYCONFIGFILE
	sed -i '' "s/p_ssh_user=/p_ssh_user=$PROD_SSH_USER/g" $WPLOYCONFIGFILE
	sed -i '' "s/p_ssh_pass=/p_ssh_pass=$PROD_SSH_PASS/g" $WPLOYCONFIGFILE
	sed -i '' "s/p_db=/p_db=${project_id}_db/g" $WPLOYCONFIGFILE
	sed -i '' "s/p_db_user=/p_db_user=${project_id:0:5}_$SECRET_CODE/g" $WPLOYCONFIGFILE
	sed -i '' "s/p_db_pass=/p_db_pass=${LIVE_DB_PASS_PREFIX}$SECRET_CODE/g" $WPLOYCONFIGFILE
	sed -i '' "s/p_path=/p_path=apps\\/${project_id}\\/public\\//g" $WPLOYCONFIGFILE
	if [[ $prod_domain && ${prod_domain} ]] ; then
		sed -i '' "s/p_url=/p_url=$prod_domain/g" $WPLOYCONFIGFILE
	fi

	#Gruntfile.js
	sed -i '' "s/projectID: '',/projectID: '$project_id',/g" $GRUNTFILE
	#package.json
	sed -i '' "s/\"name\": \"\",/\"name\": \"$project_id\",/g" $GRUNTPACKAGEFILE
	sed -i '' "s/\"description\": \"Website\",/\"description\": \"$project_id Website\",/g" $GRUNTPACKAGEFILE
}

setup_db () {
	if [ -d "$DB_DIR/$project_id" ]; then
		if [ $purpose == "new" ] ; then
			echo "\n---------------------------------------------------------------------------"
			echo "Database \"$project_id\" already exists!"
			echo "---------------------------------------------------------------------------\n"
			exit
		fi
	else
		# Create the empty database
		$MYSQL_BIN/mysqladmin -u$LOCAL_DB_USER -p$LOCAL_DB_PASS create $project_id
	fi

	if [ $purpose == "collab" ] ; then
		# Since we're collaborating, we need to go ahead and grab the database from the staging server and import it to our local machine
ssh root@$STAGING_HOST /bin/bash << EOF
mysqldump -u ${project_id:0:5}'_'$SECRET_CODE -p$LIVE_DB_PASS_PREFIX$SECRET_CODE ${project_id}_db > /srv/users/$STAGING_SSH_USER/apps/${project_id}xstaging/public/${project_id}_db.sql
sed -i "s/$project_id.$STAGING_URL_BASE/$project_id.$LOCAL_URL_BASE/g" /srv/users/$STAGING_SSH_USER/apps/${project_id}xstaging/public/${project_id}_db.sql
EOF
		rsync -avO -e ssh $STAGING_SSH_USER@$STAGING_HOST:apps/${project_id}xstaging/public/${project_id}_db.sql $SITES_DIR/$project_id/web
		mysql -u $LOCAL_DB_USER -p$LOCAL_DB_PASS $project_id < $SITES_DIR/$project_id/web/${project_id}_db.sql; rm $SITES_DIR/$project_id/web/${project_id}_db.sql
	fi
}

install_wp() {
	#settle on domain & admin user credentials
	if [[ $prod_domain && ${prod_domain} ]] ; then
		PROD_URL=$prod_domain
	else
		PROD_URL=$project_id.$LOCAL_URL_BASE
	fi
	if [[ $wp_user && ${wp_user} ]] ; then
		wp_user=$wp_user
	else
		wp_user="${project_id}-admin"
	fi
	if [[ $wp_pass && ${wp_pass} ]] ; then
		wp_pass=$wp_pass
	else
		wp_pass="${project_id}${LIVE_DB_PASS_SUFFIX}"
	fi

	#cd to working directory, using the alias we just set up
	cd $SITES_DIR/$project_id/web
	# then, install wordpress...you'll need to install wp-cli for this to work! (http://wp-cli.org/)
	wp core install --url="http://$PROD_URL" --title="$project_id" --admin_user="$wp_user" --admin_password="$wp_pass" --admin_email="${ADMIN_EMAIL}"

	# now we need to install and configure our default plugins
	PLUGINS=$(cat $WPINIT_DIR/plugins.json | jq -r ".plugins[] | .name")
	plugin_serials_arr=()

	for plugin in $PLUGINS; do
		PLUGIN_URL=$(cat $WPINIT_DIR/plugins.json | jq -r ".plugins[] | select(.name == \"$plugin\") | .url")
		IS_ACTIVATED=$(cat $WPINIT_DIR/plugins.json | jq -r ".plugins[] | select(.name == \"$plugin\") | .is_activated")

		if [ $IS_ACTIVATED == true ]; then
			ACTIVATE=" --activate"
		else
			ACTIVATE=""
		fi

		if [[ $PLUGIN_URL && ${PLUGIN_URL} ]] ; then
			wp plugin install $PLUGIN_URL$ACTIVATE
		else
			wp plugin activate $plugin
		fi
	done
}

writevhost () {
	echo "\nWriting Virtual Host..."

	cat > $VHOSTS_DIR/$project_id.conf <<- EOF
	<VirtualHost *:80>
	DocumentRoot "$SITES_DIR/$project_id/web"
	ServerName $project_id.$LOCAL_URL_BASE
	ErrorLog "$LOGS_DIR/error_log"
	CustomLog "$LOGS_DIR/access_log" common
	<Directory "$SITES_DIR/$project_id/web">
	Order allow,deny
	Allow from all
	</Directory>
	</VirtualHost>
	EOF
}

writesublimeproject () {
	# Write the project file for sublime text
	cat > $SUBLIMETEXTPROJECTS_DIR/$project_id.sublime-project <<- EOF
	{
		"folders":
		[
			{
				"name": "$project_id Root",
				"path": "$SITES_DIR/$project_id"
			},
			{
				"name":"Site Plugins",
				"path": "$SITES_DIR/$project_id/web/wp-content/plugins"
			},
			{
				"name": "YB Theme Files",
				"path": "$SITES_DIR/$project_id/web/wp-content/themes/yb"
			}
		]
	}
	EOF
}

setup_remotes() {
 	# first, production app & db (NEED TO INSTALL JQ FOR THIS TO WORK! - homebrew install: brew install jq)
	if [[ $prod_domain && ${prod_domain} ]] ; then
		PROD_URL=$prod_domain
	else
		PROD_URL="$project_id.com"
	fi
	NEWPRODAPP_OBJ=$(curl https://api.serverpilot.io/v1/apps -u $CLIENTID:$APIKEY -H "Content-Type: application/json" -d '{"name": "'$project_id'", "sysuserid": "'$PROD_SYSID'", "runtime": "php5.4", "domains": ["'$PROD_URL'", "www.'$PROD_URL'", "'$project_id'.preview.yellowberri.com"]}')
	prod_app_id=$(echo $NEWPRODAPP_OBJ | jq '.data | .id' | sed s/\"//g)
	curl https://api.serverpilot.io/v1/dbs -u $CLIENTID:$APIKEY -H "Content-Type: application/json" -d '{"appid": "'$prod_app_id'", "name": "'$project_id'_db", "user": {"name": "'${project_id:0:5}'_'$SECRET_CODE'", "password": "'$LIVE_DB_PASS_PREFIX''$SECRET_CODE'"}}'
	# now, staging
 	NEWSTAGEAPP_OBJ=$(curl https://api.serverpilot.io/v1/apps -u $CLIENTID:$APIKEY -H "Content-Type: application/json" -d '{"name": "'$project_id'xstaging", "sysuserid": "'$STAGING_SYSID'", "runtime": "php5.4", "domains": ["'$project_id'.staging.yellowberri.com"]}')
 	stage_app_id=$(echo $NEWSTAGEAPP_OBJ | jq '.data | .id' | sed s/\"//g)
	curl https://api.serverpilot.io/v1/dbs -u $CLIENTID:$APIKEY -H "Content-Type: application/json" -d '{"appid": "'$stage_app_id'", "name": "'$project_id'_db", "user": {"name": "'${project_id:0:5}'_'$SECRET_CODE'", "password": "'$LIVE_DB_PASS_PREFIX''$SECRET_CODE'"}}'
}

restartapache () {
	echo "\nRestarting Apache!"
	sudo $APACHE_DIR/apachectl -k restart
}

siteinit () {
	# Test for project existence, start from scratch if necessary, and define type of project
	preinit

	# Add handy terminal command for quickly getting to project directory
	echo 'alias '$project_id'="cd '$SITES_DIR'/'$project_id'/web"' >> ~/.sites

	# Go ahead and copy relevant files to the project directory.
	copyfiles

	if [ $purpose == "new" ] ; then
		PLUGINS=$(cat $WPINIT_DIR/plugins.json | jq -r ".plugins[] | .name")
		# Use the config info to alter the wp-config file.
		writeconfigs
	fi

	#Now, we need to create the local database (if it doesn't already exist)
	setup_db

	if [ $purpose == "new" ] ; then
		#Let's go ahead and install our Wordpress site! (as long as wp-cli is installed)
		if hash wp 2>/dev/null; then
			install_wp
		fi
		# set up project live AND staging environments on serverpilot
		setup_remotes
	fi

	# If necessary, write the ip exception in hosts file for the new site (uncomment the next line) *this is especially useful for proxy server set up*
	sudo bash -c "echo '127.0.0.1 $project_id.$LOCAL_URL_BASE' >> /private/etc/hosts"
	# sudo sed -i '' '/127.0.0.1/s/$/ '$project_id.$LOCAL_URL_BASE'/' /private/etc/hosts
	# sudo sed -i '' '/::1/s/$/ '$project_id.$LOCAL_URL_BASE'/' /private/etc/hosts

	# Write new virtual host file for the new site
	writevhost

	# Write the sublime text project file
	writesublimeproject

	#set owner permissions for the wordpress directory
	sudo chown -R $OWNER: $SITES_DIR/$project_id/web
	sudo chmod -R g+w $SITES_DIR/$project_id/web

	# Finally, restart apache!
	restartapache
	clear
	echo "---------------------------------------------------------------------------"
	echo "...done! Your site is now ready to work on."
	echo "---------------------------------------------------------------------------\n"
}

sitedelete () {
	echo "\n---------------------------------------------------------------------------"
	echo "Are you sure??!? [y/N]"
	echo "---------------------------------------------------------------------------\n"
	continueprompt
	echo "\n---------------------------------------------------------------------------"
	echo "REALLY?? [y/N]"
	echo "---------------------------------------------------------------------------\n"
	continueprompt
	echo "\n---------------------------------------------------------------------------"
	pause "Oh well, suit yourself... press [Enter] to delete the files & directories (and database, if applicable)."

	# First, remove the main site files
	rm -rf $SITES_DIR/$project_id

	# Go ahead and drop the database
	$MYSQL_BIN/mysqladmin drop $project_id -f -u$LOCAL_DB_USER -p$LOCAL_DB_PASS

	# Delete vhost and sublime project files
	rm $VHOSTS_DIR/$project_id.conf
	rm $SUBLIMETEXTPROJECTS_DIR/$project_id.sublime-project

	# Finally, remove the hosts line and bash_profile shortcut
	sudo sed -i '' '/127.0.0.1 '$project_id'.'$LOCAL_URL_BASE'/d' /private/etc/hosts
	sed -i '' "\#alias $project_id=\"cd $SITES_DIR/$project_id/web\"#d" ~/.sites

	if [ $killstaging == true ] ; then
		echo "\n---------------------------------------------------------------------------"
		echo "Are you sure you want to delete this app from the staging server?"
		echo "WARNING: This will also delete the staging database! [y/N]"
		echo "---------------------------------------------------------------------------\n"
		read ifdeletestaging

		case $ifdeletestaging in
			[nN] | [n|N][O|o] )
				clear
				echo "---------------------------------------------------------------------------"
				echo "Staging site not deleted."
				;;
			[yY] | [yY][Ee][Ss] )
				ALLAPPS=$(curl https://api.serverpilot.io/v1/apps -u $CLIENTID:$APIKEY)
				APPID=$( echo $ALLAPPS | jq -r '.data[] | select(.name=="'$project_id'xstaging") | .id')
				curl https://api.serverpilot.io/v1/apps/$APPID -u $CLIENTID:$APIKEY -X DELETE
				;;
		esac
	fi
}

# Let's get started.

project_id=""
prod_domain=""
wp_user=""
wp_pass=""
killstaging=false

# First, we want to set up some help documentation
while getopts ":h" opt; do
	case ${opt} in
		h )
			echo "Usage:"
			echo "	wpinit -h"
			echo "	wpinit new <project_id> [-d <prod_domain>] [-u <wp_user>] [-p <wp_pass>]"
			echo "	wpinit collab <project_id>"
			echo "	wpinit delete <project_id> [-k <killstaging>]"
			exit 0
			;;
		\? )
			echo "Invalid Option: -$OPTARG" 1>&2
			exit 1
			;;
	esac
done
shift $((OPTIND -1))

purpose=$1; shift
project_id=$1; shift

# load config file
# . wpinit.config
source ${BASH_SOURCE[0]/%wpinit/wpinit.config}

if [[ $project_id && ${project_id} ]] ; then
	case "$purpose" in
		new )
			while getopts ":d:u:p:" opt; do
				case $opt in
					d )
						prod_domain=$OPTARG
						;;
					u )
						wp_user=$OPTARG
						;;
					p )
						wp_pass=$OPTARG
						;;
					\? )
						echo "Invalid option: -$OPTARG" 1>&2
						;;
					: )
						echo "Invalid option: $OPTARG requires an argument" 1>&2
						;;
				esac
			done

			siteinit

			shift $((OPTIND -1))
			;;
		collab )
			siteinit

			shift $((OPTIND -1))
			;;
		delete )
			while getopts ":k" opt; do
				case $opt in
					k )
						killstaging=true
						;;
					\? )
						echo "Invalid option: -$OPTARG" 1>&2
						;;
				esac
			done

			echo "\n---------------------------------------------------------------------------"
			echo "Do you want to delete the site files associated with this project ID?"
			echo "WARNING: This will also delete any database and config files associated with this site! [y/N]"
			echo "---------------------------------------------------------------------------\n"
			continueprompt

			sitedelete

			echo "\n---------------------------------------------------------------------------"
			echo "...done! Site, database and setup are deleted."
			echo "---------------------------------------------------------------------------\n"

			shift $((OPTIND -1))
			;;
		* )
			echo "Invalid Command: -$OPTARG" 1>&2
			exit 0
			;;
	esac
else
	echo "---------------------------------------------------------------------------"
	echo "...really need a project identifier..get outta here!"
	echo "---------------------------------------------------------------------------\n"
	exit
fi
